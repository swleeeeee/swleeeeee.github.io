<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Crafeeee&#39;s</title>
    <link>https://swleeeeee.github.io/</link>
    <description>Recent content on Crafeeee&#39;s</description>
    <generator>Hugo</generator>
    <language>en-us,zh-cn</language>
    <lastBuildDate>Mon, 17 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://swleeeeee.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TPMS modeling with Matlab (rectified)</title>
      <link>https://swleeeeee.github.io/posts/25-3-17/</link>
      <pubDate>Mon, 17 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://swleeeeee.github.io/posts/25-3-17/</guid>
      <description>&lt;h1 id=&#34;1solid-shell-generation&#34;&gt;1.Solid Shell generation&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-MATLAB&#34; data-lang=&#34;MATLAB&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clear all; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;close all; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Derek&amp;#39;s User Design Inputs&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cs = &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% TPMS Cell Size in mm (Dimensional Length of a Unit Cell)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd_w = &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Cell Density through Build Width (Number of Cells through the Build Width)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd_h = &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Cell Density through Build Height (Number of Cells through the Build Height)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t = &lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% TPMS Surface Thickness in mm (Sheet Thickness of the Generated Lattice)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f = &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Cell Fineness Parameter (Number of Divisions within a Unit Cell.% Calculations&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hs = cs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Half Cell Size in mm&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;w = cs&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cd_w; &lt;span style=&#34;color:#75715e&#34;&gt;% Overall Build Width in mm&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hw = w&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Build Half-Width in mm&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;h = cs&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cd_h; &lt;span style=&#34;color:#75715e&#34;&gt;% Overall Build Height in mm&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ht = t&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Half Thickness of Lattice Sheet&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m = pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;hs; &lt;span style=&#34;color:#75715e&#34;&gt;% Periodicity Multiplier&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Design Space Range&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xl = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hw; xu = hw;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;yl = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hw; yu = hw;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;zl = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hw; zu = hw;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Design Space Range to Grid&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x = [xl:cs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;f:xu];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y = [yl:cs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;f:yu];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;z = [zl:cs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;f:zu];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Design Space Grid&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[X,Y,Z] = meshgrid(x,y,z);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Gyroid Surface Function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GMS = @(x,y,z) sin(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sin(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;z&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sin(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;z&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Trigonometric Representation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;F = GMS(X,Y,Z); &lt;span style=&#34;color:#75715e&#34;&gt;% Function Evaluation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stlname = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;G_solid.stl&amp;#39;&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;% File name&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Generate neutral Surface based on Chosen TPMS Design&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Surf = isosurface(x,y,z,F,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;boundary_indices = boundary(Surf.vertices(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), Surf.vertices(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), Surf.vertices(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Create Offsets for Desired Thickness based on Surface Normals&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SNorms = isonormals(x,y,z,F,Surf.vertices); &lt;span style=&#34;color:#75715e&#34;&gt;% Surface Normals at Vertices&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SNunit = SNorms&lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;vecnorm(SNorms,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;% Surface Unit Normals at Vertices&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OSoffset = Surf.vertices &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ht&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SNunit; &lt;span style=&#34;color:#75715e&#34;&gt;% Outer Surface Offset&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ISoffset = Surf.vertices &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ht&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SNunit; &lt;span style=&#34;color:#75715e&#34;&gt;% Inner Surface Offset&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OSoffset(boundary_indices, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) = min(max(OSoffset(boundary_indices, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), xl), xu);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OSoffset(boundary_indices, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) = min(max(OSoffset(boundary_indices, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), yl), yu);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OSoffset(boundary_indices, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) = min(max(OSoffset(boundary_indices, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), zl), zu);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ISoffset(boundary_indices, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) = min(max(ISoffset(boundary_indices, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), xl), xu);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ISoffset(boundary_indices, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) = min(max(ISoffset(boundary_indices, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), yl), yu);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ISoffset(boundary_indices, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) = min(max(ISoffset(boundary_indices, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), zl), zu);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Find Free Boundary Surfaces in order to Close Lattice Surface&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TRfb = triangulation([Surf.faces; Surf.faces &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; max(max(Surf.faces))],[ISoffset;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OSoffset]); &lt;span style=&#34;color:#75715e&#34;&gt;% Inner &amp;amp; Outer Surface Triangulation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FB = freeBoundary(TRfb); &lt;span style=&#34;color:#75715e&#34;&gt;% Surface Free Boundaries&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Enclose Openings Between Inner and Outer Surfaces&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FBtr = FB; &lt;span style=&#34;color:#75715e&#34;&gt;% Surface Free Boundary Index&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hFB = length(FB)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Half of the Free Boundary Index&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FBtr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:hFB,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) = FB(hFB&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;% Inner Surface to Outer Surface Triangulation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FBtr(hFB&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) = FBtr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:hFB,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;% Outer Surface to Inner Surface Triangulation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n = FBtr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:hFB, :); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FBtr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:hFB, :) = n(:, [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Combine Surfaces Arrays into Single Array for Triangulation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sVerts = [ISoffset; OSoffset]; &lt;span style=&#34;color:#75715e&#34;&gt;% Inner and Outer Surface Vertices&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sFaces = [Surf.faces; Surf.faces &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; max(max(Surf.faces))]; &lt;span style=&#34;color:#75715e&#34;&gt;% Inner and Outer Surfaces Faces&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sFaces(size(Surf.faces,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;size(Surf.faces,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), :) = fliplr(sFaces(size(Surf.faces,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;size(Surf.faces,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), :));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sFull = [sFaces; FBtr]; &lt;span style=&#34;color:#75715e&#34;&gt;% Add Boundaries&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Triangulation of Build for .stl Output&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TR = triangulation(sFull,sVerts);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stlwrite(TR,stlname);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The keys are :&lt;/p&gt;</description>
    </item>
    <item>
      <title>TPMS simulation using Dynamic/Explicit</title>
      <link>https://swleeeeee.github.io/posts/25-3-13/</link>
      <pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://swleeeeee.github.io/posts/25-3-13/</guid>
      <description>&lt;h1 id=&#34;1initial-simulation-settings&#34;&gt;1.Initial simulation settings&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../pic/25-3-13-1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;its results down here&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../pic/25-3-13-3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;still got some questions: why they got zero Poisson&amp;rsquo;s Ratio instead of Postive Poisson&amp;rsquo;s Ratio&lt;/p&gt;&#xA;&lt;p&gt;Despite its wrong density and step period ,the results can be partly resonable according to its consistent settings (regardless of ALLKE/ALLIE&amp;gt;5%).&lt;/p&gt;&#xA;&lt;h1 id=&#34;1rectified-simulation-settings&#34;&gt;1.Rectified simulation settings&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../pic/25-3-13-2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;As for its tiny time period, it&amp;rsquo;s according to&lt;/p&gt;&#xA;&lt;h2 id=&#34;1why-dont-we-do-that&#34;&gt;1.Why don&amp;rsquo;t we do that:&lt;/h2&gt;&#xA;&lt;p&gt;If consistnet with experimental time period, its total time increments will a be mega number, for its critical time increment is tiny near  micron-scale, it cost a lot even the collapse of the sys.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TPMS periodic array generation method using MATLAB</title>
      <link>https://swleeeeee.github.io/posts/25-3-4/</link>
      <pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://swleeeeee.github.io/posts/25-3-4/</guid>
      <description>&lt;h1 id=&#34;1solid-shell-generation&#34;&gt;1.Solid Shell generation&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-MATLAB&#34; data-lang=&#34;MATLAB&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clear all; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;close all; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Derek&amp;#39;s User Design Inputs&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cs = &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% TPMS Cell Size in mm (Dimensional Length of a Unit Cell)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd_w = &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Cell Density through Build Width (Number of Cells through the Build Width)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd_h = &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Cell Density through Build Height (Number of Cells through the Build Height)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% TPMS Surface Thickness in mm (Sheet Thickness of the Generated Lattice)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f = &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Cell Fineness Parameter (Number of Divisions within a Unit Cell.% Calculations&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hs = cs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Half Cell Size in mm&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;w = cs&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cd_w; &lt;span style=&#34;color:#75715e&#34;&gt;% Overall Build Width in mm&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hw = w&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Build Half-Width in mm&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;h = cs&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cd_h; &lt;span style=&#34;color:#75715e&#34;&gt;% Overall Build Height in mm&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ht = t&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Half Thickness of Lattice Sheet&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m = pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;hs; &lt;span style=&#34;color:#75715e&#34;&gt;% Periodicity Multiplier&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Design Space Range&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xl = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hw; xu = hw;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;yl = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hw; yu = hw;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;zl = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hw; zu = hw;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Design Space Range to Grid&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x = [xl:cs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;f:xu];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y = [yl:cs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;f:yu];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;z = [zl:cs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;f:zu];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Design Space Grid&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[X,Y,Z] = meshgrid(x,y,z);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Primitive Surface Function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PMS = @(x,y,z) cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;z); &lt;span style=&#34;color:#75715e&#34;&gt;% Trigonometric Representation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;F = PMS(X,Y,Z); &lt;span style=&#34;color:#75715e&#34;&gt;% Function Evaluation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stlname = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;P_build.stl&amp;#39;&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;% File name&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Diamond Surface Function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DMS = @(x,y,z) sin(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;sin(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;sin(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;z&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sin(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;z&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;sin(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;z&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;sin(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;z&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;% Trigonometric&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Representation&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;F = DMS(X,Y,Z); &lt;span style=&#34;color:#75715e&#34;&gt;% Function Evaluation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stlname = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D_build.stl&amp;#39;&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;% File name&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% I-WP Surface Function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IMS = @(x,y,z) &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;z) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;z)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x)) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cos(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;z); &lt;span style=&#34;color:#75715e&#34;&gt;% Trigonometric Representation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;F = IMS(X,Y,Z); &lt;span style=&#34;color:#75715e&#34;&gt;% Function Evaluation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stlname = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I_build.stl&amp;#39;&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;% File name&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Gyroid Surface Function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GMS = @(x,y,z) sin(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sin(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;z&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sin(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;z&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Trigonometric Representation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;F = GMS(X,Y,Z); &lt;span style=&#34;color:#75715e&#34;&gt;% Function Evaluation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stlname = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;G_build.stl&amp;#39;&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;% File name&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Generate neutral Surface based on Chosen TPMS Design&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Surf = isosurface(x,y,z,F,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Create Offsets for Desired Thickness based on Surface Normals&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SNorms = isonormals(x,y,z,F,Surf.vertices); &lt;span style=&#34;color:#75715e&#34;&gt;% Surface Normals at Vertices&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SNunit = SNorms&lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;vecnorm(SNorms,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;% Surface Unit Normals at Vertices&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OSoffset = Surf.vertices &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ht&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SNunit; &lt;span style=&#34;color:#75715e&#34;&gt;% Outer Surface Offset&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ISoffset = Surf.vertices &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ht&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SNunit; &lt;span style=&#34;color:#75715e&#34;&gt;% Inner Surface Offset&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Find Free Boundary Surfaces in order to Close Lattice Surface&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TRfb = triangulation([Surf.faces; Surf.faces &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; max(max(Surf.faces))],[ISoffset;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OSoffset]); &lt;span style=&#34;color:#75715e&#34;&gt;% Inner &amp;amp; Outer Surface Triangulation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FB = freeBoundary(TRfb); &lt;span style=&#34;color:#75715e&#34;&gt;% Surface Free Boundaries&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Enclose Openings Between Inner and Outer Surfaces&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FBtr = FB; &lt;span style=&#34;color:#75715e&#34;&gt;% Surface Free Boundary Index&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hFB = length(FB)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Half of the Free Boundary Index&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FBtr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:hFB,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) = FB(hFB&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;% Inner Surface to Outer Surface Triangulation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FBtr(hFB&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) = FBtr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:hFB,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;% Outer Surface to Inner Surface Triangulation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Combine Surfaces Arrays into Single Array for Triangulation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sVerts = [ISoffset; OSoffset]; &lt;span style=&#34;color:#75715e&#34;&gt;% Inner and Outer Surface Vertices&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sFaces = [Surf.faces; Surf.faces &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; max(max(Surf.faces))]; &lt;span style=&#34;color:#75715e&#34;&gt;% Inner and Outer Surfaces Faces&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sFull = [sFaces; FBtr]; &lt;span style=&#34;color:#75715e&#34;&gt;% Add Boundaries&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Triangulation of Build for .stl Output&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TR = triangulation(sFull,sVerts);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stlwrite(TR,stlname);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;2sandwich-shell-generation&#34;&gt;2.Sandwich Shell generation&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-MATLAB&#34; data-lang=&#34;MATLAB&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clear all; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;close all; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Derek&amp;#39;s User Design Inputs&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cs = &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% TPMS Cell Size in mm (Dimensional Length of a Unit Cell)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd_w = &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Cell Density through Build Width (Number of Cells through the Build Width)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd_h = &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Cell Density through Build Height (Number of Cells through the Build Height)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t_tot = &lt;span style=&#34;color:#ae81ff&#34;&gt;2.6&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% TPMS Surface Thickness in mm (Sheet Thickness of the Generated Lattice)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t_core= &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f = &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Cell Fineness Parameter (Number of Divisions within a Unit Cell.% Calculations&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hs = cs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Half Cell Size in mm&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;w = cs&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cd_w; &lt;span style=&#34;color:#75715e&#34;&gt;% Overall Build Width in mm&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hw = w&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Build Half-Width in mm&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;h = cs&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cd_h; &lt;span style=&#34;color:#75715e&#34;&gt;% Overall Build Height in mm&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ht_tot = t_tot&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Half Thickness of Lattice Sheet&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ht_core= t_core&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m = pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;hs; &lt;span style=&#34;color:#75715e&#34;&gt;% Periodicity Multiplier&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Design Space Range&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xl = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hw; xu = hw;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;yl = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hw; yu = hw;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;zl = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hw; zu = hw;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Design Space Range to Grid&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x = [xl:cs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;f:xu];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y = [yl:cs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;f:yu];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;z = [zl:cs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;f:zu];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Design Space Grid&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[X,Y,Z] = meshgrid(x,y,z);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Gyroid Surface Function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GMS = @(x,y,z) sin(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sin(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;z&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sin(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;z&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;cos(m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Trigonometric Representation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;F = GMS(X,Y,Z); &lt;span style=&#34;color:#75715e&#34;&gt;% Function Evaluation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stlname = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;G_build1.stl&amp;#39;&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;% File name&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Generate neutral Surface based on Chosen TPMS Design&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Surf = isosurface(x,y,z,F,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Create Offsets for Desired Thickness based on Surface Normals&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SNorms = isonormals(x,y,z,F,Surf.vertices); &lt;span style=&#34;color:#75715e&#34;&gt;% Surface Normals at Vertices&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SNunit = SNorms&lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;vecnorm(SNorms,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;% Surface Unit Normals at Vertices&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OSoffset = Surf.vertices &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ht_tot&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SNunit; &lt;span style=&#34;color:#75715e&#34;&gt;% Outer Surface Offset&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Soffset1 = Surf.vertices &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ht_core&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SNunit;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Soffset2 = Surf.vertices &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ht_core&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SNunit;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ISoffset = Surf.vertices &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ht_tot&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SNunit; &lt;span style=&#34;color:#75715e&#34;&gt;% Inner Surface Offset&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Find Free Boundary Surfaces in order to Close Lattice Surface&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TRfb = triangulation([Surf.faces; Surf.faces &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; max(max(Surf.faces)); Surf.faces &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;max(max(Surf.faces)); Surf.faces &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;max(max(Surf.faces))],[ISoffset;Soffset2;Soffset1;OSoffset]); &lt;span style=&#34;color:#75715e&#34;&gt;% Inner &amp;amp; Outer Surface Triangulation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FB = freeBoundary(TRfb); &lt;span style=&#34;color:#75715e&#34;&gt;% Surface Free Boundaries&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Enclose Openings Between Inner and Outer Surfaces&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FBtr = FB; &lt;span style=&#34;color:#75715e&#34;&gt;% Surface Free Boundary Index&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qFB = length(FB)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;% Half of the Free Boundary Index&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FBtr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:qFB,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) = FB(qFB&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;qFB,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FBtr(qFB&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;qFB,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) = FB(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:qFB,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FBtr(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;qFB&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;qFB,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) = FB(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;qFB&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FBtr(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;qFB&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) = FB(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;qFB&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;qFB,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Combine Surfaces Arrays into Single Array for Triangulation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sVerts = [ISoffset;Soffset2;Soffset1; OSoffset]; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sFaces = [Surf.faces; Surf.faces &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; max(max(Surf.faces)); Surf.faces &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;max(max(Surf.faces)); Surf.faces &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;max(max(Surf.faces))];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sFull = [sFaces; FBtr]; &lt;span style=&#34;color:#75715e&#34;&gt;% Add Boundaries&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;% Triangulation of Build for .stl Output&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TR = triangulation(sFull,sVerts);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stlwrite(TR,stlname);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>TPMS periodic single-cell integration simulation</title>
      <link>https://swleeeeee.github.io/posts/24-11-7/</link>
      <pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://swleeeeee.github.io/posts/24-11-7/</guid>
      <description>&lt;h1 id=&#34;1模型生成mathematica&#34;&gt;1.模型生成(mathematica)&lt;/h1&gt;&#xA;&lt;p&gt;模型方程参考&lt;a href=&#34;https://mp.weixin.qq.com/s/J1FIr99urkgp4c92-9rIRA&#34;&gt;https://mp.weixin.qq.com/s/J1FIr99urkgp4c92-9rIRA&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Gyroid&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;方程：sin(x) cos(y) + sin(y) cos(z) + sin(z) cos(x)&lt;/p&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;Schwarz (Primitive)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;方程：cos(x)+cos(y)+cos(z)&lt;/p&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;Diamond&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;方程：sin(x)*sin(y)*sin(z)+sin(x)*cos(y)*cos(z)+cos(x)*sin(y)*cos(z)+cos(x)*cos(y)*sin(z)&lt;/p&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;Lidinoid&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;方程：sin(2&lt;em&gt;x) * cos(y) * sin(z) + sin(2&lt;/em&gt;y) * cos(z) * sin(x) + sin(2&lt;em&gt;z) * cos(x) * sin(y) - cos(2&lt;/em&gt;x) * cos(2&lt;em&gt;y) - cos(2&lt;/em&gt;y) * cos(2&lt;em&gt;z) - cos(2&lt;/em&gt;z) * cos(2*x) + 0.3&lt;/p&gt;&#xA;&lt;ol start=&#34;5&#34;&gt;&#xA;&lt;li&gt;Split P&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;方程：1.1*(sin(2&lt;em&gt;x)&lt;em&gt;sin(z)&lt;em&gt;cos(y)+sin(2&lt;/em&gt;y)&lt;em&gt;sin(x)&lt;em&gt;cos(z)+sin(2&lt;/em&gt;z)&lt;em&gt;sin(y)&lt;em&gt;cos(x))&#xA;-0.2&lt;/em&gt;(cos(2&lt;/em&gt;x)&lt;em&gt;cos(2&lt;/em&gt;y)+cos(2&lt;/em&gt;y)&lt;em&gt;cos(2&lt;/em&gt;z)+cos(2&lt;/em&gt;z)&lt;em&gt;cos(2&lt;/em&gt;x))-0.4&lt;/em&gt;(cos(2&lt;em&gt;x) + cos(2&lt;/em&gt;y) +cos(2*z))&lt;/p&gt;&#xA;&lt;ol start=&#34;6&#34;&gt;&#xA;&lt;li&gt;Neovius&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;方程：3*(cos(x)+cos(y)+cos(z))+4*cos(x)*cos(y)*cos(z)&lt;/p&gt;&#xA;&lt;ol start=&#34;7&#34;&gt;&#xA;&lt;li&gt;IWP&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;方程：2 (Cos[Pi/10 x] Cos[Pi/10 y] + Cos[Pi/10 y] Cos[Pi/10 z] + Cos[Pi/10 z] Cos[Pi/10 x]) - (Cos[Pi/5 x] + Cos[Pi/5 y] +Cos[Pi/5 z])&lt;/p&gt;</description>
    </item>
    <item>
      <title>My original intention for building a BLOG</title>
      <link>https://swleeeeee.github.io/posts/24-10-4/</link>
      <pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://swleeeeee.github.io/posts/24-10-4/</guid>
      <description>&lt;p&gt;I don&amp;rsquo;t intend to be famous or what , I will definitely public all my stuffs on CSDN or Bilibili if I want to do so.&#xA;So, I build my personal web basicly for recording beacause there is no site that contains all mixed blogs better than you own web.&lt;/p&gt;&#xA;&lt;p&gt;But more importantly, it is an essay ,more accurately , a &amp;ldquo;recruitment ad&amp;rdquo; that inspired me for doing this website , and I highly recommend&#xA;all &amp;ldquo;lost&amp;rdquo; or ambitious college students  to read this one, for its enlightening me to do more meaningful things rather than pure rat race.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Universal PBC node-Matching abaqus script</title>
      <link>https://swleeeeee.github.io/posts/24-11-1/</link>
      <pubDate>Fri, 01 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://swleeeeee.github.io/posts/24-11-1/</guid>
      <description>&lt;h1 id=&#34;traits&#34;&gt;Traits&lt;/h1&gt;&#xA;&lt;p&gt;Specially designed for TPMS&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Automatically adapt to the constraint type of dian/bian/mian,&lt;/li&gt;&#xA;&lt;li&gt;no need to manually select set REALIZE THE AUTOMATION OF MIAN, DIAN, AND BIAN SETTINGS&lt;/li&gt;&#xA;&lt;li&gt;Solid/shell type support is supported in cases&lt;/li&gt;&#xA;&lt;li&gt;faces, edges, and points can be incomplete&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#--------------------------------------------------------------------------&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#--------------------Applying the periodic boundary conditions-------------&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#The script is run in the Abaqus CAE interface not command&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#Tol parameter should be smaller than the element size.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#Input file of Abaqus should be provided to the script&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#Notice that Partname/instancename/node sets should be assigned with the &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#following indicated name, e.g. Part-1,Part1-1,MIANX&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#Make sure that the model with vertices have one of them on the corner&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#-----------------Written by Guodong Fang, 12/03/2015, in Bristol----------&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#-------------Modified by Yuqin Xiao ,10/24/2024 ,in ZheJiang--------------&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#--------------------------------------------------------------------------&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#-----------Contact me for the source code---------------------------------&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;theory&#34;&gt;Theory&lt;/h1&gt;&#xA;&lt;p&gt;pending&lt;/p&gt;</description>
    </item>
    <item>
      <title>Meshing tricks for TPMS</title>
      <link>https://swleeeeee.github.io/posts/24-10-15/</link>
      <pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://swleeeeee.github.io/posts/24-10-15/</guid>
      <description>&lt;p&gt;要处理类似极小曲面（TPMS）这样的异形曲面，可能会产生一些网格划分上的问题，例如，曲面生成的如果不够光滑，在划分网格时会产生小细线、小面片，通常情况下网格质量不会特别好。以下是我自己找到的一套处理方法，欢迎讨论、优化：&lt;/p&gt;&#xA;&lt;h1 id=&#34;对异形曲面参数化建模时建立更光滑的曲面&#34;&gt;对异形曲面参数化建模时，建立更光滑的曲面&lt;/h1&gt;&#xA;&lt;p&gt;例如我用mathematica建模，就是选取更多的PlotPoints&lt;/p&gt;&#xA;&lt;h1 id=&#34;1使用magics进行三角面片简化细化光滑重画网格&#34;&gt;1.使用Magics进行三角面片简化/细化光滑/重画网格&lt;/h1&gt;&#xA;&lt;p&gt;这一步使用的是软件里的功能先傻瓜操作，对曲面质量做一个初步的提升，如果曲面质量还可以可以忽略这一步（讲道理只要是专门处理stl的软件都会有这个功能也不一定要用magics）&lt;/p&gt;&#xA;&lt;h1 id=&#34;2在hypermesh当中先根据导入的stl文件建立surface再对这个surface进行automesh操作初步得到网格如果发现质量好就可以直接导出&#34;&gt;2.在hypermesh当中，先根据导入的stl文件建立surface，再对这个surface进行automesh操作，初步得到网格，如果发现质量好就可以直接导出&lt;/h1&gt;&#xA;&lt;h1 id=&#34;3检查网格问题对存在问题进行修补删除&#34;&gt;3.检查网格问题，对存在问题进行修补删除&lt;/h1&gt;&#xA;&lt;p&gt;注意网格划分时候的边界情况，如果有很多小细线，需要在quick edit&amp;ndash;toogle lines进行处理；&lt;/p&gt;&#xA;&lt;h3 id=&#34;如果遇到质量很差的多小面片&#34;&gt;如果遇到质量很差的多小面片：&lt;/h3&gt;&#xA;&lt;p&gt;————————————————&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;方案一&lt;/strong&gt;：检查网格的质量，使用check elem&amp;ndash;点选各个检查特征值&amp;ndash;save failed&amp;ndash;delete&amp;ndash;retrieve&amp;ndash;delete entity&#xA;方法参考&lt;a href=&#34;https://www.bilibili.com/video/BV1Mh4y117nQ/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=6ed4355279e79869f34ed924af694b1d&#34;&gt;https://www.bilibili.com/video/BV1Mh4y117nQ/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=6ed4355279e79869f34ed924af694b1d&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;方案二&lt;/strong&gt;：replace合并节点&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;方案三&lt;/strong&gt;：直接选中小面片delete&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;方案四&lt;/strong&gt;：局部重新划分&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;方案五&lt;/strong&gt;：edit elem&amp;ndash;create 修补网格，之后重新划分&lt;/p&gt;&#xA;&lt;p&gt;以下是实操视频，由于第一遍就已经产生质量不错的网格，所以只简单展示了一下方案一&#xA;&lt;a href=&#34;https://www.bilibili.com/video/BV1niCUYREi2/?vd_source=6ed4355279e79869f34ed924af694b1d&#34;&gt;https://www.bilibili.com/video/BV1niCUYREi2/?vd_source=6ed4355279e79869f34ed924af694b1d&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;————————————————&lt;/p&gt;</description>
    </item>
    <item>
      <title>Markdown Syntax Guide &amp; Math Typesetting</title>
      <link>https://swleeeeee.github.io/posts/24-9-30/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://swleeeeee.github.io/posts/24-9-30/</guid>
      <description>&lt;h1 id=&#34;markdown-syntax-guide&#34;&gt;Markdown Syntax Guide&lt;/h1&gt;&#xA;&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About Me</title>
      <link>https://swleeeeee.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://swleeeeee.github.io/about/</guid>
      <description>&lt;p&gt;Bechelor ZJNU Intellegent Manufacturing&lt;/p&gt;&#xA;&lt;p&gt;Master   CQU  Additively  Manufacturing&lt;/p&gt;&#xA;&lt;p&gt;Based in Zhejiang&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
